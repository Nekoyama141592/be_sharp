rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // collectionGroupのルール
    match /{path=**}/users/{uid} {
      allow read: if isAuthenticated();
    }
    match /{path=**}/userAnswers/{answerId} {
      allow read: if isAuthenticated();
    }
    match /problems/{problemId} {
      allow read: if isAuthenticated();
    }
    match /users/{uid} {
      allow read: if isAuthenticated();
      allow create: if isUserAuthenticated(uid) && isValidPublicUser(request.resource.data);
      allow delete: if isUserAuthenticated(uid);
      match /userAnswers/{answerId} {
        allow read: if isUserAuthenticated(uid);
        allow create: if isUserAuthenticated(uid) && isValidAnswer(request.resource.data);
      }
      match /muteUsers/{muteUid} {
        allow read, delete: if isUserAuthenticated(uid);
        allow create: if isUserAuthenticated(uid) && isValidMuteUser(request.resource.data);
      }
    }
    // Private data
    match /privateUsers/{uid} {
      allow read: if isUserAuthenticated(uid);
      allow create: if isUserAuthenticated(uid) && isValidPrivateUser(request.resource.data);
      match /verifiedPurchases/{purchaseId} {
        allow read: if isUserAuthenticated(uid);
      }
    }
  }
  function isValidPublicUser(user) {
    return true
  }
  
  function isValidAnswer(data) {
    return true
  }

  function isValidMuteUser(data) {
    return true
  }

  function isValidPrivateUser(user) {
    return true
  }

  function isAuthenticated() {
  	return request.auth != null;
  }

  function isUserAuthenticated(uid) {
    return request.auth.uid == uid && request.auth.token.email_verified;
  }
}
